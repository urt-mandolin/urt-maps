{"version":3,"sources":["MapCard.js","TagsList.js","MainPage.js","MapDetailPage.js","App.js","serviceWorker.js","index.js"],"names":["MapCard","map","cb","ss","screenShots","prefix","_id","className","onClick","src","alt","Grid","container","direction","justify","alignItems","item","xs","id","length","title","TagsList","tagsList","visibleTagsList","clickedTagsList","callBackFunc","style","paddingLeft","tagName","count","isUnClicked","has","Button","variant","color","size","marginRight","marginBottom","paddingBottom","Badge","badgeContent","MainPage","updateViewCB","CONNECTED","useState","isConnected","setIsConnected","maps","useRef","visibleMaps","setVisibleMaps","visibleTags","setVisibleTags","Set","clickedTags_Set","setClickedTags_Set","searchInput","setSearchInput","handleCardClick","aMap","ssFileName","useEffect","current","MapsJSON","err","console","error","newVisibleMaps","filter","singleMap","include","forEach","tag","featureTags","includes","sort","a","b","newVisibleTags","Map","get","set","InputBase","placeholder","inputProps","startAdornment","InputAdornment","position","Search","value","onChange","event","target","fullWidth","toString","newTagsList","delete","add","MapDetailPage","ssClicked","height","minWidth","maxHeight","App","viewState","setViewState","detailMap","setDetailMap","ssFileName2","setssFileName2","CssBaseline","aMapObj","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d0d584db.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MapCard.css';\nimport { Grid } from '@material-ui/core';\n\nexport default function MapCard({ map, cb }) {\n    const ss = map.screenShots;\n    const prefix = `ss/${map._id}/`;\n\n    return (\n        <>\n            <div className='card'>\n                <button className='bare-button-main' onClick={() => cb(map, ss[0])}>\n                    <img className='main-ss' src={prefix + ss[0]} alt='main screenshot' />\n                </button>\n                <span>\n                    <button className='bare-button-sub bare-button-sub-left' onClick={() => cb(map, ss[1])}>\n                        <img className='sub-ss' src={prefix + ss[1]} alt='screenshot 2' />\n                    </button>\n                    <button className='bare-button-sub bare-button-sub-right' onClick={() => cb(map, ss[2])}>\n                        <img className='sub-ss' src={prefix + ss[2]} alt='screenshot 3' />\n                    </button>\n                </span>\n                <Grid container direction='row' justify='center' alignItems='center'>\n                    <Grid item xs={2}>\n                        &nbsp;\n                    </Grid>\n                    <Grid item xs={8}>\n                        <h2 id='title'>{map._id}</h2>\n                    </Grid>\n                    <Grid item xs={2}>\n                        {ss.length > 3 ? (\n                            <button className='more-button' onClick={() => cb(map, ss[3])} title='more screenshots'>\n                                {/* ^ *** link to carousel later */}\n                                +more screenshots\n                            </button>\n                        ) : null}\n                    </Grid>\n                </Grid>\n            </div>\n        </>\n    );\n}\n\nMapCard.propTypes = {\n    map: PropTypes.object,\n    cb: PropTypes.func,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Badge, Button } from '@material-ui/core';\n\nTagsList.propTypes = {\n    tagsArray: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string, PropTypes.number)),\n    clickedTagsList: PropTypes.instanceOf(Set),\n    callBackFunc: PropTypes.func,\n};\n\n// this function takes an Array of strings+counts, a Set of clicked tags, and a callback Function, and returns a collection of Buttons\nexport default function TagsList({ visibleTagsList: tagsList, clickedTagsList, callBackFunc }) {\n    if (!tagsList || tagsList.length < 0 || !callBackFunc) return <div>Making tags...</div>;\n    return (\n        <div style={{ paddingLeft: '.2rem' }}>\n            {tagsList.map(([tagName, count]) => {\n                const isUnClicked = clickedTagsList && !clickedTagsList.has(tagName);\n                return (\n                    <Button\n                        variant={isUnClicked && count > 1 ? 'outlined' : 'contained'}\n                        color={isUnClicked ? 'default' : 'primary'}\n                        size='small'\n                        key={tagName + '_button'}\n                        onClick={() => callBackFunc(tagName)}\n                        style={{ marginRight: '5px', marginBottom: '5px', paddingBottom: '1px' }}\n                    >\n                        <Badge badgeContent={count} color='primary'>\n                            {tagName} &nbsp;\n                        </Badge>\n                    </Button>\n                );\n            })}\n        </div>\n    );\n}\n","import React, { useEffect, useState, useRef } from 'react';\n// import * as Realm from 'realm-web'; // mongodb realm package\nimport MapCard from './MapCard';\nimport TagsList from './TagsList';\nimport './MainPage.css'; // style sheet for just this app component\nimport { Badge, InputAdornment, InputBase } from '@material-ui/core'; // reset CSS properties across browsers to a baseline, and controls\nimport { Search } from '@material-ui/icons';\nimport * as MapsJSON from './maps-db-2021-12-20.json'; // gets imported as a Module\n\nexport default function MainPage({ updateViewCB }) {\n    const CONNECTED = 'IS connected';\n    const NOTCONNECTED = 'is NOT connected';\n    const [isConnected, setIsConnected] = useState(NOTCONNECTED);\n    // const mongoApp = useRef([]); // for saving the mongoApp object across renders of this component;  *** may not need to save this if only used in one function one time?\n\n    const maps = useRef([]); // all the maps from the database, full object details per map\n    const [visibleMaps, setVisibleMaps] = useState([]); // array of map objects\n    const [visibleTags, setVisibleTags] = useState([]);\n    const [clickedTags_Set, setClickedTags_Set] = useState(new Set());\n    const [searchInput, setSearchInput] = useState(''); // complains about switching from uncontrolled to controlled input without an empty string to start\n\n    // console.log(MapsJSON);\n    // this is where we connect to the database, and save it all into \"maps\"\n    useEffect(() => {\n        if (maps.current.length < 1) {\n            setIsConnected('is connecting...');\n            // mongoApp.current = new Realm.App({ id: 'urt-maps-realmapp-xjuqv' }); // string is app ID (realmApp, not realMapp)\n\n            // const creds = new AnonymousCredential();\n            try {\n                // Authenticate the user\n                // mongoApp.current.logIn(Realm.Credentials.anonymous()).then((returnedUser) => { ***\n                // assert(mongoClient.id === mongoApp.currentUser.id);\n                // returnedUser.functions.getAllMapData().then((response) => {\n                // maps.current = response.result;\n                maps.current = MapsJSON.default; // take the array from the Module and put it into the maps reference variable\n                setClickedTags_Set(new Set()); // initialize this Set and trigger Visibles updates\n                setIsConnected(CONNECTED);\n                // });\n                // });\n            } catch (err) {\n                console.error('Failed to log in to db', err);\n                setIsConnected('DB ERROR');\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []); // the empty array at the end means this hook only runs once, after the web page is done with the initial render\n\n    // this hook updates visibleMaps & visibleTags when clickedTags_Set changes\n    useEffect(() => {\n        let newVisibleMaps = [];\n\n        // update visibleMaps based on what tags are clicked\n        if (!clickedTags_Set || clickedTags_Set.size < 1) {\n            if (maps && maps.current) newVisibleMaps = maps.current; // all maps visible, if maps have loaded\n        } else {\n            newVisibleMaps = maps.current.filter((singleMap) => {\n                let include = true;\n                clickedTags_Set.forEach((tag) => {\n                    include &= singleMap.featureTags.includes(tag); // a map must have every clicked tag to be included\n                });\n                return include ? singleMap : null;\n            });\n        }\n        newVisibleMaps.sort((a, b) => {\n            if (a._id < b._id) return -1;\n            if (a._id > b._id) return 1;\n            return 0;\n        });\n        setVisibleMaps(newVisibleMaps);\n\n        // update visibleTags based on visibleMaps (reusing newVisibleMaps above, not waiting for async set)\n        let newVisibleTags = new Map();\n        newVisibleMaps.forEach((singleMap) => {\n            singleMap.featureTags.forEach((tag) => {\n                // for each tag in each map\n                let count = newVisibleTags.get(tag); // if a tag exists, get its count\n                if (!count) count = 1;\n                else count += 1;\n                newVisibleTags.set(tag, count); // add pair to Map... tag: count\n            });\n        });\n        setVisibleTags(\n            [...newVisibleTags].sort((a, b) => {\n                // if (a[1] > b[1]) return -1; // descending by count ([1])\n                // if (a[1] < b[1]) return 1;\n                if (a[0] > b[0]) return 1; // when tied, ascending by tag name ([0])\n                if (a[0] < b[0]) return -1;\n                return 0; // this should never be reached due to unique tag names, but just in case\n            })\n        );\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [clickedTags_Set]);\n\n    function handleMapFilterClick(tag) {\n        let newTagsList = new Set(clickedTags_Set); // shallow copy\n        if (newTagsList.has(tag)) {\n            newTagsList.delete(tag);\n        } else {\n            newTagsList.add(tag);\n        }\n\n        setClickedTags_Set(newTagsList);\n        setSearchInput([...newTagsList].toString()); // *** just for real-time testing\n    }\n\n    function handleSearchChange(event) {\n        setSearchInput(event.target.value);\n\n        // todo:  parse input in real-time and update clicked tags, visibles\n    }\n\n    function handleCardClick(aMap, ssFileName) {\n        // window.location.assign('ss/' + mapName + '/' + ssFileName);\n        updateViewCB(aMap, ssFileName);\n    }\n\n    return (\n        <>\n            <header className='App-header'>\n                <h1>\n                    <Badge\n                        badgeContent={\n                            'db ' +\n                            isConnected +\n                            ' | ' +\n                            (visibleMaps ? visibleMaps.length : '0') +\n                            (visibleMaps && visibleMaps.length === 1 ? ' map visible' : ' maps visible')\n                        }\n                        color={isConnected === CONNECTED ? 'secondary' : 'error'}\n                    >\n                        URT MAP FINDER\n                    </Badge>\n                </h1>\n            </header>\n            <div id='search-bar'>\n                <InputBase\n                    placeholder='start typing map keywords here, separated by commas'\n                    id='search-box'\n                    inputProps={{ 'aria-label': 'naked' }}\n                    startAdornment={\n                        <InputAdornment position='start'>\n                            <Search />\n                        </InputAdornment>\n                    }\n                    value={searchInput}\n                    onChange={handleSearchChange}\n                    fullWidth\n                />\n            </div>\n            <div style={{ paddingLeft: '.5em' }}>\n                Realtime test, showing your <em>typed text or clicked tag:</em>\n                &nbsp; {searchInput.toString()}\n            </div>\n            <h2 style={{ paddingLeft: '1rem' }}>\n                <Badge badgeContent={visibleTags.length + ' visible'} color='secondary'>\n                    Map feature tags\n                </Badge>\n            </h2>\n            <TagsList\n                visibleTagsList={visibleTags}\n                clickedTagsList={clickedTags_Set}\n                callBackFunc={handleMapFilterClick}\n            />\n            <br />\n            <div id='card-list'>\n                {visibleMaps.length > 0\n                    ? visibleMaps.map((aMap) => <MapCard map={aMap} cb={handleCardClick} key={aMap._id} />)\n                    : 'loading maps...'}\n            </div>\n        </>\n    );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction MapDetailPage({ map, ssClicked }) {\n    if (!map || !ssClicked) return <p>EMPTY PARAMETERS PASSED</p>;\n\n    const prefix = `ss/${map._id}/`;\n\n    return (\n        <div style={{ height: 'fitContent(100)' }}>\n            <div style={{ minWidth: '100%', maxHeight: '80%' }}>\n                <img src={prefix + ssClicked} alt={'screenshot ' + ssClicked} />\n            </div>\n        </div>\n    );\n}\n\nMapDetailPage.propTypes = {\n    map: PropTypes.object,\n    ssClicked: PropTypes.string,\n};\n\nexport default MapDetailPage;\n","import React, { useState } from 'react';\nimport MainPage from './MainPage';\nimport MapDetailPage from './MapDetailPage';\nimport { CssBaseline } from '@material-ui/core';\n\nexport default function App() {\n    const MAINVIEW = 1;\n\n    const [viewState, setViewState] = useState(MAINVIEW);\n    const [detailMap, setDetailMap] = useState();\n    const [ssFileName2, setssFileName2] = useState();\n\n    function updateView(aMapObj, ssFileName) {\n        setDetailMap(aMapObj);\n        setssFileName2(ssFileName);\n        setViewState(2);\n    }\n\n    // return is what renders the html (and jsx) of our component:\n    return (\n        <>\n            <CssBaseline />\n            {viewState === MAINVIEW ? (\n                <MainPage updateViewCB={updateView} />\n            ) : (\n                <MapDetailPage map={detailMap} ssClicked={ssFileName2} />\n            )}\n        </>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}